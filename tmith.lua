-- =========================
-- Plants vs Brainrots ‚Äì Auto Loop (No-Walk + Webhook + Collect/1min)
-- by you & helper üòÑ
-- =========================
_G.Enabled = true

-- ===== CONFIG =====
local PLANT_DELAY = 1.2
local COLLECT_INTERVAL = 60 -- ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ: ‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏Å ‡πÜ 1 ‡∏ô‡∏≤‡∏ó‡∏µ
local MAX_PLATFORM_IDX = 80 -- ‡πÑ‡∏•‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ñ‡∏∂‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ô‡∏µ‡πâ
local WEBHOOK_URL = "PUT_YOUR_WEBHOOK_HERE" -- ‡∏ß‡∏≤‡∏á URL Discord Webhook (‡∏´‡∏£‡∏∑‡∏≠ "" ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ)
local MAX_ROW_IDX = 7
-- ===== SERVICES =====
local Players = game:GetService("Players")
local RS = game:GetService("ReplicatedStorage")
local VIM = game:GetService("VirtualInputManager")
local Http = game:GetService("HttpService")
local plr = Players.LocalPlayer
local Plots = workspace:WaitForChild("Plots")

-- ===== WEBHOOK HELPERS (optional) =====
local function _postWebhook(payload)
    if not WEBHOOK_URL or WEBHOOK_URL == "" then
        return
    end
    local req = getgenv().http_request or request or (syn and syn.request) or http_request
    local body = Http:JSONEncode(payload)
    local headers = {["Content-Type"] = "application/json"}
    if req then
        pcall(
            function()
                req({Url = WEBHOOK_URL, Method = "POST", Headers = headers, Body = body})
            end
        )
    end
end
local function sendText(msg)
    _postWebhook({content = msg, username = "AutoPvB"})
end
local function sendEmbed(title, desc, color, fields)
    _postWebhook(
        {
            username = "AutoPvB",
            embeds = {
                {
                    title = title,
                    description = desc,
                    color = color or 0x57F287,
                    fields = fields,
                    timestamp = DateTime.now():ToIsoDate()
                }
            }
        }
    )
end

-- ===== FIND MY PLOT =====
local currentPlot
local function Findplot()
    for _, plot in ipairs(Plots:GetChildren()) do
        local sign = plot:FindFirstChild("PlayerSign")
        local bb = sign and sign:FindFirstChild("BillboardGui")
        local tl = bb and bb:FindFirstChild("TextLabel")
        if tl and tl.Text == plr.Name then
            currentPlot = plot
            return plot
        end
    end
end
while not Findplot() do
    task.wait(0.25)
end

-- ===== TILES / PLANTS =====
local function getGrassTiles(plot)
    local tiles, rows = {}, plot and plot:FindFirstChild("Rows")
    if not rows then
        return tiles
    end
    for _, row in ipairs(rows:GetChildren()) do
        local g = row:FindFirstChild("Grass")
        if g then
            for _, inst in ipairs(g:GetChildren()) do
                if inst:IsA("BasePart") then
                    local CanPlace = inst:GetAttribute("CanPlace")
                    if CanPlace then
                        table.insert(tiles, inst)
                    end
                end
            end
        end
    end
    return tiles
end

local function randomPointOnTile(tile, margin)
    margin = margin or 0.15
    local hx, hz = tile.Size.X * (0.5 - margin), tile.Size.Z * (0.5 - margin)
    local ox = (math.random() * 2 - 1) * hx
    local oz = (math.random() * 2 - 1) * hz
    return (tile.CFrame * CFrame.new(ox, tile.Size.Y / 2, oz)).Position
end

local function getExistingPlants(plot)
    local folder, res = plot:FindFirstChild("Plants"), {}
    if not folder then
        return res
    end
    for _, p in ipairs(folder:GetChildren()) do
        if p:GetAttribute("Owner") == plr.Name then
            local pos = p:GetAttribute("Position")
            local sz = p:GetAttribute("Size")
            if typeof(pos) == "Vector3" then
                table.insert(res, {position = pos, size = sz})
            end
        end
    end
    return res
end

local function isSpotFree(point, plants, minGap)
    minGap = minGap or 0.6
    for _, pl in ipairs(plants) do
        local need = math.max(minGap, (pl.size or 1) * 0.5)
        if (point - pl.position).Magnitude <= need then
            return false
        end
    end
    return true
end

local function pickRandomFreePoint(tile, plants, tries, margin, minGap)
    tries = tries or 12
    for _ = 1, tries do
        local pt = randomPointOnTile(tile, margin)
        if isSpotFree(pt, plants, minGap) then
            return pt
        end
    end
    return nil
end

local function isTileEmpty(tile)
    local occ = tile:GetAttribute("Occupied")
    if occ ~= nil then
        return not occ
    end
    for _, c in ipairs(tile:GetChildren()) do
        if c:IsA("Model") or c:IsA("BasePart") then
            return false
        end
    end
    return true
end

local function pickEmptyThenAny(tiles)
    local empty = {}
    for _, t in ipairs(tiles) do
        if isTileEmpty(t) then
            table.insert(empty, t)
        end
    end
    local list = (#empty > 0) and empty or tiles
    return (#list > 0) and list[math.random(1, #list)] or nil
end

-- ===== TOOLS / SEEDS =====
local function EquipTool(toolItemName)
    local char = plr.Character or plr.CharacterAdded:Wait()
    for _, tool in ipairs(char:GetChildren()) do
        if tool:IsA("Tool") and tool:GetAttribute("ItemName") == toolItemName then
            return tool
        end
    end
    local bag = plr:FindFirstChild("Backpack")
    if bag then
        for _, tool in ipairs(bag:GetChildren()) do
            if tool:IsA("Tool") and tool:GetAttribute("ItemName") == toolItemName then
                tool.Parent = char
                for _ = 1, 15 do
                    if char:FindFirstChild(tool.Name) then
                        break
                    end
                    task.wait(0.05)
                end
                return tool
            end
        end
    end
    return nil
end

local function findLatestSeedId(seedName)
    local containers = {plr.Character, plr.Backpack}
    for _, bag in ipairs(containers) do
        if bag then
            for _, tool in ipairs(bag:GetChildren()) do
                if tool:IsA("Tool") and tool:GetAttribute("ItemName") == seedName then
                    local id = tool:GetAttribute("ID")
                    if id then
                        return id
                    end
                end
            end
        end
    end
    return nil
end

-- ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏°‡∏•‡πá‡∏î‡∏ú‡πà‡∏≤‡∏ô Remote ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á + webhook
local function BuySeed(seedName)
    if not seedName or seedName == "" then
        return false
    end
    local ok, err =
        pcall(
        function()
            RS.Remotes.BuyItem:FireServer(seedName)
        end
    )
    if ok then
        sendEmbed("üõí ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏°‡∏•‡πá‡∏î", ("‡∏ã‡∏∑‡πâ‡∏≠ **%s** ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"):format(seedName), 0x5865F2)
    else
        sendEmbed("üõí ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏°‡∏•‡πá‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", ("**%s**\n```%s```"):format(seedName, tostring(err)), 0xED4245)
    end
    return ok
end

-- ‡∏õ‡∏•‡∏π‡∏Å 1 ‡∏ï‡πâ‡∏ô (‡∏™‡∏∏‡πà‡∏°‡∏à‡∏∏‡∏î‡∏ö‡∏ô tile) + webhook
local function plant(tile, seedName)
    if not tile then
        return
    end
    local id = findLatestSeedId(seedName)
    if not id then
        sendEmbed("üå± ‡∏õ‡∏•‡∏π‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", "‡∏´‡∏≤ **ID** ‡∏Ç‡∏≠‡∏á seed ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠: `" .. tostring(seedName) .. "`", 0xED4245)
        return
    end
    if not EquipTool(seedName) then
        sendEmbed("üå± ‡∏õ‡∏•‡∏π‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", "‡πÑ‡∏°‡πà‡∏°‡∏µ/‡∏ñ‡∏∑‡∏≠ **Tool** ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: `" .. tostring(seedName) .. "`", 0xED4245)
        return
    end

    local planted = getExistingPlants(currentPlot)
    local spot = pickRandomFreePoint(tile, planted, 12, 0.15, 0.6)
    if not spot then
        sendEmbed("üå± ‡∏õ‡∏•‡∏π‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ö‡∏ô tile", 0xED4245)
        return
    end

    local item = seedName:match("^(%S+)") -- "Cactus Seed" -> "Cactus"
    local ok, err =
        pcall(
        function()
            RS.Remotes.PlaceItem:FireServer(
                {
                    ID = id,
                    CFrame = CFrame.new(spot),
                    Item = item,
                    Floor = tile
                }
            )
        end
    )

    if ok then
        sendEmbed(
            "üå± ‡∏õ‡∏•‡∏π‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            ("‡∏õ‡∏•‡∏π‡∏Å **%s** ‡∏ö‡∏ô `%s`\n‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á `(%.1f, %.1f, %.1f)`"):format(
                item,
                tile:GetFullName(),
                spot.X,
                spot.Y,
                spot.Z
            ),
            0x57F287,
            {{name = "SeedID", value = "`" .. tostring(id) .. "`", inline = true}}
        )
    else
        sendEmbed("üå± ‡∏õ‡∏•‡∏π‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", "PlaceItem error:\n```" .. tostring(err) .. "```", 0xED4245)
    end
end

-- ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏•‡πá‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á (‡∏î‡∏π Attribute Seed/Uses)
local function getOwnedSeeds()
    local res, containers = {}, {plr.Backpack, plr.Character}
    for _, bag in ipairs(containers) do
        if bag then
            for _, tool in ipairs(bag:GetChildren()) do
                if tool:IsA("Tool") and tool:GetAttribute("Seed") then
                    local name = tool:GetAttribute("ItemName") or tool.Name
                    local uses = tonumber(tool:GetAttribute("Uses")) or 1
                    table.insert(res, {Name = name, Uses = uses})
                end
            end
        end
    end
    return res
end

local function plantOwnedSeeds()
    local free, used, cap = getFreePlantSlots()
    if free <= 0 then
        sendEmbed(
            "üå± ‡∏ñ‡∏∂‡∏á‡∏•‡∏¥‡∏°‡∏¥‡∏ï‡∏õ‡∏•‡∏π‡∏Å",
            ("‡∏õ‡∏•‡∏π‡∏Å‡πÅ‡∏•‡πâ‡∏ß %d/%d ‚Äî ‡∏£‡∏≠‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ Row ‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢‡∏õ‡∏•‡∏π‡∏Å‡∏ï‡πà‡∏≠"):format(used, cap),
            0xFAA61A
        )
        return
    end

    local seeds = getOwnedSeeds()
    if #seeds == 0 then
        return
    end

    for _, s in ipairs(seeds) do
        if free <= 0 then
            break
        end
        if EquipTool(s.Name) then
            local char = plr.Character or plr.CharacterAdded:Wait()
            for _ = 1, 15 do
                if char:FindFirstChild(s.Name) then
                    break
                end
                task.wait(0.05)
            end

            -- ‡∏õ‡∏•‡∏π‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
            local usesToPlant = math.min(s.Uses or 1, free)
            for i = 1, usesToPlant do
                local tiles = getGrassTiles(currentPlot)
                if #tiles == 0 then
                    return
                end
                local t = pickEmptyThenAny(tiles)
                if t and t:GetAttribute("CanPlace") then
                    plant(t, s.Name)
                    free = free - 1
                    if free <= 0 then
                        break
                    end
                    task.wait(PLANT_DELAY + 0.1)
                end
            end
        end
    end
end

-- ===== SHOP (GUI) =====
-- ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤ -> number (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö $, ‡∏Ñ‡∏≠‡∏°‡∏°‡∏≤, ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á, ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° ‡πÅ‡∏•‡∏∞ k/m/b/t)
local function parsePrice(txt)
    txt = tostring(txt or "")
    txt = txt:lower():gsub("%$", ""):gsub(",", ""):gsub("%s+", "")
    local mult = 1
    if txt:find("k") then
        mult = 1e3
        txt = txt:gsub("k", "")
    elseif txt:find("m") then
        mult = 1e6
        txt = txt:gsub("m", "")
    elseif txt:find("b") then
        mult = 1e9
        txt = txt:gsub("b", "")
    elseif txt:find("t") then
        mult = 1e12
        txt = txt:gsub("t", "")
    end
    local n = tonumber(txt) or 0
    return math.floor(n * mult + 0.5)
end

local function readSeedShop()
    local main = plr.PlayerGui:FindFirstChild("Main")
    if not main then
        return {}
    end
    local seedsRoot = main:FindFirstChild("Seeds")
    if not seedsRoot then
        return {}
    end
    local sf = seedsRoot:FindFirstChild("Frame") and seedsRoot.Frame:FindFirstChild("ScrollingFrame")
    if not sf then
        return {}
    end
    local items = {}
    for _, seedFrame in ipairs(sf:GetChildren()) do
        if seedFrame:IsA("Frame") then
            local name = seedFrame.Name
            local buy = seedFrame:FindFirstChild("Buttons") and seedFrame.Buttons:FindFirstChild("Buy")
            local priceLabel = buy and buy:FindFirstChild("TextLabel")
            if priceLabel and typeof(priceLabel.Text) == "string" then
                table.insert(items, {SeedName = name, Price = parsePrice(priceLabel.Text)})
            end
        end
    end
    table.sort(
        items,
        function(a, b)
            return a.Price > b.Price
        end
    ) -- ‡πÅ‡∏û‡∏á‚Üí‡∏ñ‡∏π‡∏Å
    return items
end

local function pickBestAffordableSeed(money, items)
    for _, it in ipairs(items) do
        if money >= it.Price then
            return it
        end
    end
    return nil
end

-- ===== BRAINROT =====
local function EquipBestBrainrot()
    pcall(
        function()
            RS.Remotes.EquipBestBrainrots:FireServer()
        end
    )
end

-- ===== PLATFORMS (No-Walk) ‚Äì ‡∏Ç‡πâ‡∏≤‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ Attribute `Rebirth` =====
local function isPlatformOwned(slot)
    local priceVal = slot:FindFirstChild("PlatformPrice")
    local price = priceVal and tonumber(priceVal.Value) or 0
    local rebirthAttr = slot:GetAttribute("Rebirth")
    if rebirthAttr and tonumber(rebirthAttr) and tonumber(rebirthAttr) > 0 then
        return false, "rebirth"
    end
    return (not priceVal) or (price <= 0), nil
end

-- ‡πÉ‡∏ä‡πâ parsePrice(txt) ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ (‡πÅ‡∏õ‡∏•‡∏á "$5,000" ‚Üí 5000)

local function getPlatformPrice(slot)
    local priceObj = slot:FindFirstChild("PlatformPrice")
    if not priceObj then
        return 0
    end

    -- ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô NumberValue/IntValue
    if priceObj:IsA("NumberValue") or priceObj:IsA("IntValue") then
        return tonumber(priceObj.Value) or 0
    end

    -- ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå UI ‡∏ó‡∏µ‡πà‡∏°‡∏µ TextLabel: Money
    local moneyLabel = nil
    for _, d in ipairs(priceObj:GetDescendants()) do
        if d:IsA("TextLabel") and d.Name == "Money" then
            moneyLabel = d
            break
        end
    end
    if moneyLabel and typeof(moneyLabel.Text) == "string" then
        return parsePrice(moneyLabel.Text) -- "$5,000" -> 5000
    end

    return 0
end

local function findNextPlatformToBuy_NoRebirth()
    local plants = currentPlot and currentPlot:FindFirstChild("Plants")
    if not plants then
        return nil
    end

    for i = 2, MAX_PLATFORM_IDX do
        local slot = plants:FindFirstChild(tostring(i))
        if not slot then
            break
        end

        -- ‡∏Ç‡πâ‡∏≤‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç Rebirth
        local reb = slot:GetAttribute("Rebirth")
        if reb and tonumber(reb) and tonumber(reb) > 0 then
            -- skip
        else
            local price = getPlatformPrice(slot)
            -- ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤ > 0 ‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ã‡∏∑‡πâ‡∏≠
            if price and price > 0 then
                return i, price
            end
        end
    end
    return nil
end

local function tryBuyNextPlatform_NoWalk()
    local idx, price = findNextPlatformToBuy_NoRebirth()
    if not idx then
        return false
    end
    local money = (plr.leaderstats and plr.leaderstats.Money and plr.leaderstats.Money.Value) or 0
    if money < price then
        sendEmbed("üß± ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°", ("‡∏¢‡∏±‡∏á‡∏ã‡∏∑‡πâ‡∏≠ **#%d** ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ $%s)"):format(idx, tostring(price)), 0xFAA61A)
        return false
    end
    EquipBestBrainrot() -- ‡∏ö‡∏≤‡∏á‡πÄ‡∏Å‡∏°‡πÄ‡∏ä‡πá‡∏Å state
    local ok, err =
        pcall(
        function()
            RS.Remotes.BuyPlatform:FireServer(tostring(idx))
        end
    )
    if ok then
        sendEmbed("üß± ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", ("‡∏ã‡∏∑‡πâ‡∏≠‡∏ä‡πà‡∏≠‡∏á **#%d** ‡∏£‡∏≤‡∏Ñ‡∏≤ **$%s**"):format(idx, tostring(price)), 0x57F287)
    else
        sendEmbed("üß± ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", "```" .. tostring(err) .. "```", 0xED4245)
    end
    return ok
end

-- ===== COLLECT MONEY: ‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏ö Center ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÅ‡∏•‡πâ‡∏ß =====
local function collectMoneyOnAllCenters(options)
    options = options or {}
    local dwell = options.dwell or 0.35
    local doJump = (options.jump == nil) and true or options.jump
    local maxIdx = options.maxIdx or MAX_PLATFORM_IDX

    local plants = currentPlot and currentPlot:FindFirstChild("Plants")
    if not plants then
        return
    end
    local character = plr.Character or plr.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then
        return
    end

    local moneyBefore = (plr.leaderstats and plr.leaderstats.Money and plr.leaderstats.Money.Value) or 0
    local visited, skippedRebirth = 0, 0

    for i = 1, maxIdx do
        local slot = plants:FindFirstChild(tostring(i))
        if not slot then
            break
        end
        local owned, reason = isPlatformOwned(slot)
        if owned then
            local center = slot:FindFirstChild("Center")
            if center and center:IsA("BasePart") then
                humanoid:MoveTo(center.Position)
                humanoid.MoveToFinished:Wait()
                if doJump then
                    VIM:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                    task.wait(0.05)
                    VIM:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                end
                visited = visited + 1
                task.wait(dwell)
            end
        elseif reason == "rebirth" then
            skippedRebirth = skippedRebirth + 1
        end
    end

    local moneyAfter = (plr.leaderstats and plr.leaderstats.Money and plr.leaderstats.Money.Value) or moneyBefore
    local gain = moneyAfter - moneyBefore
    sendEmbed(
        "üí∞ ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å Brainrot",
        ("‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏£‡∏ö **%d ‡∏à‡∏∏‡∏î**, ‡∏Ç‡πâ‡∏≤‡∏° Rebirth **%d**\n‡πÑ‡∏î‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏° **$%s** (‡∏£‡∏ß‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô $%s)"):format(
            visited,
            skippedRebirth,
            tostring(gain),
            tostring(moneyAfter)
        ),
        0xFEE75C
    )
end

-- ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤ + stock ‡∏à‡∏≤‡∏Å UI ‡∏£‡πâ‡∏≤‡∏ô (‡∏Å‡∏±‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏õ‡∏¥‡∏î/‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î)
local function getAvailableSeeds()
    local main = plr.PlayerGui:FindFirstChild("Main")
    local seedsUI = main and main:FindFirstChild("Seeds")
    local frame = seedsUI and seedsUI:FindFirstChild("Frame")
    local scrolling = frame and frame:FindFirstChild("ScrollingFrame")
    if not scrolling then
        return {}
    end

    local list = {}
    for _, seedFrame in ipairs(scrolling:GetChildren()) do
        if seedFrame:IsA("Frame") and seedFrame:FindFirstChild("Buttons") then
            local name = seedFrame.Name
            local buy = seedFrame.Buttons:FindFirstChild("Buy")
            local priceLabel = buy and buy:FindFirstChild("TextLabel")
            local stockLabel = seedFrame:FindFirstChild("Stock")
            if priceLabel and stockLabel then
                local price = parsePrice(priceLabel.Text)
                local stock = tonumber((stockLabel.Text or ""):match("x(%d+)")) or 0
                if stock > 0 then
                    table.insert(list, {Name = name, Price = price, Stock = stock})
                end
            end
        end
    end
    table.sort(
        list,
        function(a, b)
            return a.Price > b.Price
        end
    ) -- ‡πÅ‡∏û‡∏á -> ‡∏ñ‡∏π‡∏Å
    return list
end

-- ‡πÉ‡∏ä‡πâ parsePrice(txt) ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (‡πÅ‡∏õ‡∏•‡∏á $5,000 / $5k ‚Üí number)

local function getRowPrice(rowFolder)
    -- workspace.Plots[<id>].Rows["n"].Button.Main.SurfaceGui.TextLabel
    local button = rowFolder:FindFirstChild("Button")
    local main = button and button:FindFirstChild("Main")
    local sg = main and main:FindFirstChild("SurfaceGui")
    local label = sg and sg:FindFirstChild("TextLabel")
    if label and typeof(label.Text) == "string" then
        return parsePrice(label.Text)
    end
    return 0
end

local function findNextRowToBuy()
    if not currentPlot then
        return nil
    end
    local rows = currentPlot:FindFirstChild("Rows")
    if not rows then
        return nil
    end

    -- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 2 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß 1 ‡∏°‡∏±‡∏Å‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÅ‡∏£‡∏Å
    for i = 2, MAX_ROW_IDX do
        local rf = rows:FindFirstChild(tostring(i))
        if not rf then
            break
        end

        local enabled = rf:GetAttribute("Enabled")
        if enabled == true then
            -- ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡πâ‡∏≤‡∏°
        else
            local price = getRowPrice(rf)
            if price and price > 0 then
                return i, price, rf
            end
        end
    end
    return nil
end
local function tryBuyNextRow_NoWalk()
    local idx, price = findNextRowToBuy()
    if not idx then
        return false
    end

    local money = (plr.leaderstats and plr.leaderstats.Money and plr.leaderstats.Money.Value) or 0
    if money < price then
        sendEmbed(
            "üåø ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏ñ‡∏ß‡∏õ‡∏•‡∏π‡∏Å‡∏û‡∏∑‡∏ä",
            ("‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏ã‡∏∑‡πâ‡∏≠ **Row #%d** (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ $%s)"):format(idx, tostring(price)),
            0xFAA61A
        )
        return false
    end

    local ok, err =
        pcall(
        function()
            -- ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì: FireServer(2) ‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏Ç‡∏•‡πâ‡∏ß‡∏ô
            RS.Remotes.BuyRow:FireServer(idx)
        end
    )

    if ok then
        sendEmbed(
            "üåø ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏ñ‡∏ß‡∏õ‡∏•‡∏π‡∏Å‡∏û‡∏∑‡∏ä‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            ("‡∏ã‡∏∑‡πâ‡∏≠ **Row #%d** ‡∏£‡∏≤‡∏Ñ‡∏≤ **$%s** (+5 slot)"):format(idx, tostring(price)),
            0x57F287
        )
    else
        sendEmbed("üåø ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏ñ‡∏ß‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", "```" .. tostring(err) .. "```", 0xED4245)
    end
    return ok
end
local function getPlantCapacity()
    if not currentPlot then
        return 0
    end
    local rows = currentPlot:FindFirstChild("Rows")
    if not rows then
        return 0
    end
    local enabledCount = 0
    for _, rf in ipairs(rows:GetChildren()) do
        if rf:GetAttribute("Enabled") == true then
            enabledCount = enabledCount + 1
        end
    end
    return enabledCount * 5 -- ‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏ñ‡∏ß‡∏•‡∏∞ +5
end

-- ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß (Row) ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏π‡∏ì 5 = ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏õ‡∏•‡∏π‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
local function getPlantCapacity()
    if not currentPlot then
        return 0
    end
    local rows = currentPlot:FindFirstChild("Rows")
    if not rows then
        return 0
    end

    local enabled = 0
    for _, rf in ipairs(rows:GetChildren()) do
        if rf:IsA("Folder") then
            local en = rf:GetAttribute("Enabled")
            -- ‡∏ö‡∏≤‡∏á‡πÅ‡∏°‡∏û Row#1 ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ Attribute ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠
            if en == true or (en == nil and rf.Name == "1") then
                enabled = enabled + 1
            end
        end
    end
    return enabled * 5
end

-- ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‚Äú‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‚Äù ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô plot ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
local function getMyPlantCount()
    if not currentPlot then
        return 0
    end
    local folder = currentPlot:FindFirstChild("Plants")
    if not folder then
        return 0
    end

    local n = 0
    for _, p in ipairs(folder:GetChildren()) do
        -- ‡πÉ‡∏ô‡∏£‡∏π‡∏õ Owner ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (‡πÄ‡∏ä‡πà‡∏ô "AJKJ9098a")
        if p:GetAttribute("Owner") == plr.Name then
            n = n + 1
        end
    end
    return n
end

local function getFreePlantSlots()
    local cap = getPlantCapacity()
    local used = getMyPlantCount()
    return math.max(0, cap - used), used, cap
end

-- ===== MAIN LOOP (‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏°‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà) =====
local lastCollect = tick()
sendText("üîÅ ‡πÄ‡∏£‡∏¥‡πà‡∏° Auto PvB (No-Walk + Webhook + Collect/1min)")
local lastCap = getPlantCapacity()
while _G.Enabled do
    -- 1) ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏°‡∏•‡πá‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏û‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏´‡∏ß (‡πÄ‡∏ä‡πá‡∏Å‡∏à‡∏≤‡∏Å GUI ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á + ‡∏°‡∏µ‡∏™‡∏ï‡πá‡∏≠‡∏Å)
    local seeds = getAvailableSeeds()
    local money = (plr.leaderstats and plr.leaderstats.Money and plr.leaderstats.Money.Value) or 0

    for _, seed in ipairs(seeds) do
        if money >= seed.Price then
            print(("ü™¥ ‡∏ã‡∏∑‡πâ‡∏≠ %s ‡∏£‡∏≤‡∏Ñ‡∏≤ $%d (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ %d ‡∏ä‡∏¥‡πâ‡∏ô)"):format(seed.Name, seed.Price, seed.Stock))
            BuySeed(seed.Name)
            sendEmbed(
                "ü™¥ ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏°‡∏•‡πá‡∏î‡πÉ‡∏´‡∏°‡πà",
                ("‡∏ã‡∏∑‡πâ‡∏≠ **%s** ‡∏£‡∏≤‡∏Ñ‡∏≤ `$%d`\n‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô `%d` ‡∏ä‡∏¥‡πâ‡∏ô"):format(seed.Name, seed.Price, seed.Stock),
                0x00FF00
            )
            task.wait(0.3)
            -- ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≠‡∏ö‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
            money = (plr.leaderstats and plr.leaderstats.Money and plr.leaderstats.Money.Value) or money
            break -- ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏Ñ‡πà‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö
        end
    end

    -- 2) ‡∏õ‡∏•‡∏π‡∏Å‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡∏•‡πá‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á (‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏)
    local freeSlots, usedSlots, capSlots = getFreePlantSlots()
    if freeSlots > 0 then
        plantOwnedSeeds()
    else
        -- ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß: ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ã‡∏∑‡πâ‡∏≠ Row ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å
        tryBuyNextRow_NoWalk()
    end
    -- 2) ‡∏õ‡∏•‡∏π‡∏Å‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡∏•‡πá‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á
    plantOwnedSeeds()

    -- 3) ‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ó‡∏∏‡∏Å COLLECT_INTERVAL ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    if tick() - lastCollect >= COLLECT_INTERVAL then
        collectMoneyOnAllCenters({dwell = 0.35, jump = true, maxIdx = MAX_PLATFORM_IDX})
        lastCollect = tick()
    end

    -- 4) ‡∏•‡∏≠‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏Ç‡πâ‡∏≤‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ Rebirth)
    tryBuyNextPlatform_NoWalk()
    tryBuyNextRow_NoWalk()
    local cap = getPlantCapacity()

    if cap > lastCap then
        sendEmbed("üìà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏õ‡∏•‡∏π‡∏Å", ("‡∏à‡∏≤‡∏Å **%d** ‚Üí **%d** ‡∏ï‡πâ‡∏ô"):format(lastCap, cap), 0x00FFFF)
        lastCap = cap
    end
    task.wait(1)
end

sendText("‚èπ ‡∏´‡∏¢‡∏∏‡∏î Auto PvB")
